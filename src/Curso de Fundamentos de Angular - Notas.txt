TypeScript puede inferir tipos:

Ej. const username: string = 'angel112';

El colocar " : " enseguida del nombre de la variable, se refiere a que esperaremos a que
sea de un tipo determinado, en este caso le diremos que es de tipo string.

También se le puede asignar más tipos:

Ej. const username: string | number = 'angel112';
    const username: string | number = 1;

En ninguno de los casos nos arrojaría un error, ya que espera ser de tipo number o de
tipo string.

=========================================================================================

POO en TypeScript

Dos formas de crear una clase:

1.
	class Person {
		age: number;
		lastName: string;
		constructor(age: number, lastName: string) {
			this.age = age;
			this.lastName = lastName;
		}
	}
2.
	class Person {
		constructor(public age: number, public lastName: string) {
		}
	}

La segunda forma nos permite crear la clase persona de la misma forma que la primer
forma, únicamente reduciendo la cantidad de líneas necesarias para ello, aún así,
las dos cuentan con variables públicas, y en caso de ser requerido, modificar su acceso
para volverlo privado.

=========================================================================================

Property Binding

Podemos ligar propiedades desde el componente.

Ej. <input type="text" placeholder="Nombre" [value]="name">
Colocar entre " [] " nos permite decirle al framework que obtendrá ese valor desde el
componente.

=========================================================================================

NgIf

Podemos hacer uso de condicionales en el template de nuestro componente de angular.

Ej.

	<div *ngIf="person.name === 'Angel' && person.age === 21">
	  <p>Soy Angel y tengo 21 años.</p>
	</div>

Si se requiere un bloque de else, se haría de la siguiente forma:

	<div *ngIf="person.name === 'Eduardo'; else elseBlock">
	  <p>Soy Eduardo</p>
	</div>
	<ng-template #elseBlock>
	  <p>Else block</p>
	</ng-template>

En otros casos, también se puede utilizar el bloque then, de la misma forma que el bloque
else.

=========================================================================================

NgFor

Al igual que con el condicional if, podemos usar el ciclo for en nuestro template.

Ej.

	<ul>
	  <li *ngIf="names.length === 0">No hay nombres registrados.</li>
	  <li *ngFor="let name of names; index as i">
	    {{ name }}
	    <button (click)="deleteName(i)">Eliminar</button>
	  </li>
	</ul>

=========================================================================================